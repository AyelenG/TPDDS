@startuml

abstract class Repositorio<T> [[java:model.repositories.Repositorio]] {
	-List<T> elementos
	+T get(int i)
	+int indexOf(T e)
	+int size()
	+void agregarElementos(List<T> elementos)
	+void agregarElemento(T e)
	+T buscarElemento(T e)
	+boolean existeElemento(T e)
	+void borrarElementos()
	+{abstract}boolean sonIguales(T e1, T e2)
}

class RepoCuentas [[java:model.repositories.RepoCuentas]] {
	-{static}RepoCuentas instance
	-String RUTA
	+{static}RepoCuentas getInstance()
	+void cargar()
	+void guardar()
	+void agregarDesdeEmpresas(List<Empresa> empresas)
}

class RepoEmpresas [[java:model.repositories.RepoEmpresas]] {
	-{static}RepoEmpresas instance
	+void agregarElementos(List<Empresa> empresas)
}

class RepoIndicadores [[java:model.repositories.RepoIndicadores]] {
	-{static}RepoIndicadores instance
	-String RUTA
	-List<Indicador> indicadoresPredefinidos
	+void cargar()
	+void guardar()
	+List<Indicador> getIndicadoresPredefinidos()
	+List<Indicador> getIndicadoresDeUsuario()
	+void borrarIndicadoresDeUsuario()
}

class RepoMetodologias [[java:model.repositories.RepoMetodologias]] {
	-{static}RepoMetodologias instance
	-String RUTA
	-List<Metodologia> metodologiasPredefinidas
	+void cargar()
	+void guardar()
	+List<Metodologia> getIndicadoresPredefinidos()
	+List<Metodologia> getMetodologiasDeUsuario()
	+void borrarMetodologiasDeUsuario()
}

Repositorio <|-- RepoCuentas
Repositorio <|-- RepoEmpresas
Repositorio <|-- RepoIndicadores
Repositorio <|-- RepoMetodologias

class Indicador [[java:model.Indicador]] {
	-String nombre
	-String formula
	-BigDecimal valor
	+boolean esIgual(Indicador indicador)
}


class Empresa [[java:model.Empresa]] {
	-String symbol
	-String nombre
	-List<Periodo> periodos
	+Periodo buscarPeriodoYAgregar(Periodo periodo)
	+void agregarPeriodos(List<Periodo> periodos)
	+void agregarPeriodo(Periodo periodo)
	+Periodo buscarPeriodo(Periodo periodo)
	+boolean existePeriodo(Periodo periodo)
	+void agregarCuenta(Periodo periodo, CuentaEmpresa cuenta)
	+List<Periodo> getUltimosNAnios(int n)
	+int antiguedad()
}

class Periodo [[java:model.Periodo]] {
	-Integer anio
	-List<CuentaEmpresa> cuentas
	+void agregarCuentas(List<CuentaEmpresa> cuentas)
	+void agregarCuenta(CuentaEmpresa cuenta)
	+CuentaEmpresa buscarCuenta(Cuenta cuenta)
	+boolean existeCuenta(Cuenta cuenta)
	+boolean esIgual(Periodo periodo)
}

class CuentaEmpresa [[java:model.CuentaEmpresa]] {
	-BigDecimal valor
}
class Cuenta [[java:model.Cuenta]] {
	-String nombre
	+boolean esIgual(Cuenta cuenta)
}
Cuenta <|-- CuentaEmpresa

Empresa --> "*" Periodo : contiene
Periodo --> "*" CuentaEmpresa : contiene

class Indicador [[java:model.Indicador]] {
	-String nombre
	-String formula
	-Expresion expresion
	+BigDecimal evaluar(Periodo periodo)
	+String generarFormula()
	-String generarArbol(Expresion expresion)
}

interface Expresion [[java:model.evaluador.Expresion]] {
	BigDecimal getValor(Periodo periodo, RepoIndicadores indiceIndicadores)
}

Indicador --> Expresion : contiene

class TerminalCuenta [[java:model.evaluador.terminales.TerminalCuenta]] {
	-String nombreCuenta
}
Expresion <|.. TerminalCuenta
class TerminalIndicador [[java:model.evaluador.terminales.TerminalIndicador]] {
	-String nombreIndicador
}
Expresion <|.. TerminalIndicador
class TerminalLiteral [[java:model.evaluador.terminales.TerminalLiteral]] {
	-BigDecimal literal
}
Expresion <|.. TerminalLiteral

abstract class Operacion [[java:model.evaluador.operaciones.Operacion]] {
	-Expresion opIzq
	-Expresion opDer
	#{abstract}BigDecimal calcular(BigDecimal opIzq, BigDecimal opDer)
}
Expresion <|.. Operacion

class Suma [[java:model.evaluador.operaciones.Suma]] {
}
Operacion <|-- Suma
class Resta [[java:model.evaluador.operaciones.Resta]] {
}
Operacion <|-- Resta
class Multiplicacion [[java:model.evaluador.operaciones.Multiplicacion]] {
}
Operacion <|-- Multiplicacion
class Division [[java:model.evaluador.operaciones.Division]] {
}
Operacion <|-- Division

class ExpresionBuilder [[java:model.parser.ExpresionBuilder]] {
	+Expresion build()
}

Indicador ..> ExpresionBuilder : usa

class Metodologia [[java:model.Metodologia]] {
	-String nombre
	-List<CondicionNoTaxativa> condicionesNT
	-List<CondicionTaxativa> condicionesT
	-List<CondicionCombinada> condicionesComb
	+List<Empresa> aplicar(List<Empresa> empresas)
	+List<Empresa> obtenerFiltradas(List<Empresa> empresas)
	+List<Empresa> obtenerOrdenadas(List<Empresa> empresas)
	-int comparar(Empresa emp1, Empresa emp2)
}

interface CondicionNoTaxativa [[java:model.condiciones.notaxativas.CondicionNoTaxativa]] {
	int comparar(Empresa emp1, Empresa emp2)
	boolean esValida(Empresa emp)
}
interface CondicionTaxativa [[java:model.condiciones.taxativas.CondicionTaxativa]] {
	boolean convieneInvertirEn(Empresa emp)
	boolean esValida(Empresa emp)
}
interface CondicionCombinada [[java:model.condiciones.combinadas.CondicionCombinada]] {
}
CondicionTaxativa <|-- CondicionCombinada
CondicionNoTaxativa <|-- CondicionCombinada

abstract class CondicionConfigurable [[java:model.condiciones.CondicionConfigurable]] {
	#String nombre
	#Comparador comparador
	#String nombreIndicador
	#Integer cantidadAnios
	+boolean esValida(Empresa emp)
}
class CondicionNoTaxativaConfigurable [[java:model.condiciones.notaxativas.CondicionNoTaxativaConfigurable]] {
	-Integer peso
}
CondicionConfigurable <|-- CondicionNoTaxativaConfigurable
CondicionNoTaxativa <|.. CondicionNoTaxativaConfigurable

class CondicionTaxativaConfigurable [[java:model.condiciones.taxativas.CondicionTaxativaConfigurable]] {
	-TipoCondicionTaxativa tipo
	-BigDecimal valorDeReferencia
}
CondicionConfigurable <|-- CondicionTaxativaConfigurable
CondicionTaxativa <|.. CondicionTaxativaConfigurable

class CondicionCombinadaCompuesta [[java:model.condiciones.combinadas.CondicionCombinadaCompuesta]] {
	-String nombre
	-CondicionNoTaxativa condNT
	-CondicionTaxativa condT
}
CondicionCombinada <|.. CondicionCombinadaCompuesta
CondicionCombinadaCompuesta --> CondicionNoTaxativa : contiene
CondicionCombinadaCompuesta --> CondicionTaxativa : contiene

class Longevidad [[java:model.condiciones.combinadas.Longevidad]] {
}
CondicionCombinada <|.. Longevidad

interface Comparador [[java:model.condiciones.Comparador]] {
	int aplicar(BigDecimal valor1, BigDecimal valor2)
}
class Mayor [[java:model.condiciones.Mayor]] {
}
Comparador <|.. Mayor
class Menor [[java:model.condiciones.Menor]] {
}
interface Comparador [[java:model.condiciones.Comparador]] {
}
Comparador <|.. Menor

CondicionConfigurable --> Comparador : contiene

interface TipoCondicionTaxativa [[java:model.condiciones.taxativas.TipoCondicionTaxativa]] {
	boolean aplicar(Empresa emp, CondicionTaxativaConfigurable condicion, Indicador indicador)
}
class Simple [[java:model.condiciones.taxativas.Simple]] {
}
TipoCondicionTaxativa <|.. Simple
class Sumatoria [[java:model.condiciones.taxativas.Sumatoria]] {
}
TipoCondicionTaxativa <|.. Sumatoria
class Promedio [[java:model.condiciones.taxativas.Promedio]] {
}
TipoCondicionTaxativa <|.. Promedio
class Mediana [[java:model.condiciones.taxativas.Mediana]] {
}
TipoCondicionTaxativa <|.. Mediana
class Tendencia [[java:model.condiciones.taxativas.Tendencia]] {
}
TipoCondicionTaxativa <|.. Tendencia

CondicionTaxativaConfigurable --> TipoCondicionTaxativa : contiene

Metodologia --> "*" CondicionNoTaxativa : contiene
Metodologia --> "*" CondicionTaxativa : contiene
Metodologia --> "*" CondicionCombinada : contiene

RepoCuentas --> "*" Cuenta : contiene
RepoEmpresas --> "*" Empresa : contiene
RepoIndicadores --> "*" Indicador : contiene
RepoMetodologias --> "*" Metodologia : contiene
@enduml